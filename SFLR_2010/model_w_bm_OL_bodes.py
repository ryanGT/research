from __future__ import division
from scipy import *

def Bodes(s, params):
    if type(params) == dict:
        params = SLFR_TMM.SLFR_params(**params)
    EI = params.EI
    L1 = params.L
    L2 = params.L2
    mu = params.mu
    c_beam = params.c_beam
    if c_beam > 0.0:
        EI = EI*(1.0+c_beam*s)
##     beta = pow((-1*s*s*L**4*mu/EI),0.25)
##     d1 = 0.5*(cos(beta)+cosh(beta))
##     d2 = 0.5*(sinh(beta)-sin(beta))
##     d3 = 0.5*(cosh(beta)-cos(beta))
##     d4 = 0.5*(sin(beta)+sinh(beta))
    beta1 = pow((-1*s*s*L1**4*mu/EI),0.25)
    d1_1 = 0.5*(cos(beta1)+cosh(beta1))
    d2_1 = 0.5*(sinh(beta1)-sin(beta1))
    d3_1 = 0.5*(cosh(beta1)-cos(beta1))
    d4_1 = 0.5*(sin(beta1)+sinh(beta1))
    beta2 = pow((-1*s*s*L2**4*mu/EI),0.25)
    d1_2 = 0.5*(cos(beta2)+cosh(beta2))
    d2_2 = 0.5*(sinh(beta2)-sin(beta2))
    d3_2 = 0.5*(cosh(beta2)-cos(beta2))
    d4_2 = 0.5*(sin(beta2)+sinh(beta2))
    a_m = params.a_m
    a_L = params.a_L
    a_I = params.a_I
    a_r = params.a_r
    b_m = params.b_m
    b_L = params.b_L
    b_I = params.b_I
    b_r = params.b_r
    k_spring = params.k_spring
    c_spring = params.c_spring
    k_clamp = params.k_clamp
    c_clamp = params.c_clamp
    K_act = params.K_act
    tau = params.tau
    a_gain = params.a_gain
    p_act1 = params.p_act1
    p_act2 = params.p_act2
    z_act = params.z_act
    I = 1.0j
    #--------------------------------
    x0 = 1/EI
    x1 = c_clamp*s
    x2 = k_clamp + x1
    x3 = 1/x2
    x4 = b_L*d1_1*x3
    x5 = 1/beta1
    x6 = L1*b_L*d4_1*x0*x5
    x7 = L1**2
    x8 = x5**2
    x9 = d3_1*x0*x7*x8
    x10 = x4 + x6 + x9
    x11 = -x10
    x12 = b_L*x9
    x13 = x7**(3/2)
    x14 = x8**(3/2)
    x15 = L1*d2_1*x0*x5*x7*x8
    x16 = L1*b_L*d4_1*x3*x5
    x17 = x12 + x15 + x16
    x18 = -x17
    x19 = s**2
    x20 = x13**(-2/3)
    x21 = x14**(-2/3)
    x22 = EI*b_L*d3_1*x20*x21*x3
    x23 = x20**(1/2)
    x24 = b_L*beta1*d2_1*x23
    x25 = a_L - a_r
    x26 = x19**(-1/2)
    x27 = p_act1 + s
    x28 = 1/x27
    x29 = 2*pi*I
    x30 = p_act1 + x29
    x31 = abs(x30)
    x32 = b_I*x19
    x33 = b_L - b_r
    x34 = b_m*b_r*x19*x33
    x35 = x32 - x34
    x36 = K_act*x26*x28*x3*x31*x35
    x37 = K_act*x26*x28*x31
    x38 = x36 + x37
    x39 = -K_act*b_m*b_r*s*x28*x31*x9
    x40 = d1_1*x38
    x41 = x24*x37
    x42 = L1*d4_1*x0*x35*x37*x5
    x43 = x39 + x40 + x41 + x42
    x44 = d3_1*x0*x35*x37*x7*x8
    x45 = b_L*d1_1*x37
    x46 = -K_act*b_m*b_r*s*x15*x28*x31
    x47 = L1*d4_1*x38*x5
    x48 = 1/L2
    x49 = x44 + x45 + x46 + x47
    x50 = a_I*x19
    x51 = -a_m*a_r*x19*x25
    x52 = x50 + x51
    x53 = -EI*d3_1*x20*x21*x38
    x54 = -beta1*d2_1*x23*x35*x37
    x55 = x23**3
    x56 = x21**(3/2)
    x57 = -EI*b_L*d4_1*x37*x55*x56
    x58 = K_act*b_m*b_r*d1_1*s*x28*x31
    x59 = x48**2
    x60 = beta2**2
    x61 = c_spring*s
    x62 = k_spring + x61
    x63 = 1/x62
    x64 = x35*x63
    x65 = 1.0 + x64
    x66 = x3*x65
    x67 = x63 + x66
    x68 = x24*x63
    x69 = L1*d4_1*x0*x5*x65
    x70 = d1_1*x67
    x71 = x68 + x69 + x70
    x72 = b_m*b_r*x19*x63*x9
    x73 = x71 - x72
    x74 = b_L*d1_1*x63
    x75 = -b_m*b_r*x15*x19*x63
    x76 = d3_1*x0*x65*x7*x8
    x77 = L1*d4_1*x5*x67
    x78 = x60**(-1/2)
    x79 = b_m*b_r*d1_1*x19*x63
    x80 = -EI*b_L*d4_1*x55*x56*x63
    x81 = -beta1*d2_1*x23*x65
    x82 = -EI*d3_1*x20*x21*x67
    x83 = x74 + x75 + x76 + x77
    x84 = x59**(3/2)
    x85 = x78**(-3)
    x86 = a_L*x11
    x87 = x18 + x86
    x88 = a_m*x18*x19
    x89 = a_m*a_r*x11*x19
    x90 = d1_1 + x22 + x24 + x88 + x89
    x91 = -1.0*b_L*d1_1
    x92 = x11*x52
    x93 = d1_1 + x22 + x24
    x94 = -a_L*x93
    x95 = -1.0*L1*d4_1*x5
    x96 = -x25*x88
    x97 = -1.0*EI*x24*x3
    x98 = x91 + x92 + x94 + x95 + x96 + x97
    x99 = a_L*x73
    x100 = x83 + x99
    x101 = EI*b_L*d3_1*x20*x21*x63
    x102 = b_m*b_r*x19*x63*x95
    x103 = EI*beta1*d2_1*x23*x67
    x104 = x52*x73
    x105 = x79 + x80 + x81 + x82
    x106 = -a_L*x105
    x107 = -a_m*x19*x25*x83
    x108 = d1_1*x65
    x109 = x101 + x102 + x103 + x104 + x106 + x107 + x108
    x110 = a_m*a_r*x19*x73
    x111 = a_m*x19*x83
    x112 = x105 + x110 + x111
    x113 = d1_2*x109
    x114 = EI*d3_2*x100*x59*x60
    x115 = EI*beta2*d2_2*x48*x73
    x116 = x113 + x114 + x115
    x117 = L2*d4_2*x112*x78
    x118 = x116 - x117
    x119 = 1/x118
    x120 = a_L*x43
    x121 = x120 + x49
    x122 = EI*b_L*d3_1*x20*x21*x37
    x123 = -a_m*x19*x25*x49
    x124 = x43*x52
    x125 = d1_1*x35*x37
    x126 = EI*beta1*d2_1*x23*x38
    x127 = x53 + x54 + x57 + x58
    x128 = -a_L*x127
    x129 = K_act*b_m*b_r*s*x28*x31*x95
    x130 = x122 + x123 + x124 + x125 + x126 + x128 + x129
    x131 = a_m*x19*x49
    x132 = a_m*a_r*x19*x43
    x133 = x127 + x131 + x132
    x134 = EI*beta2*d2_2*x11*x48
    x135 = EI*d3_2*x59*x60*x87
    x136 = -L2*d4_2*x78*x90
    x137 = d1_2*x98
    x138 = x134 + x135 + x136 + x137
    x139 = -EI*d4_2*x100*x84*x85
    x140 = -EI*d3_2*x59*x60*x73
    x141 = -beta2*d2_2*x109*x48
    x142 = d1_2*x112
    x143 = x139 + x140 + x141 + x142
    x144 = -EI*d3_2*x11*x59*x60
    x145 = -EI*beta2*d4_2*x48*x59*x60*x87
    x146 = L2*d4_2*x78*x90
    x147 = -x137
    x148 = -x134
    x149 = -x135
    x150 = x146 + x147 + x148 + x149
    x151 = x119*x143*x150
    x152 = d1_2*x90
    x153 = -beta2*d2_2*x48*x98
    x154 = x144 + x145 + x151 + x152 + x153
    x155 = 1/x154
    x156 = d1_2*x133
    x157 = -EI*beta2*d4_2*x121*x48*x59*x60
    x158 = -beta2*d2_2*x130*x48
    x159 = -EI*d3_2*x43*x59*x60
    x160 = x156 + x157 + x158 + x159
    x161 = x119*x138*x155*x160
    x162 = EI*d3_2*x121*x59*x60
    x163 = d1_2*x130
    x164 = EI*beta2*d2_2*x43*x48
    x165 = -L2*d4_2*x133*x78
    x166 = x162 + x163 + x164 + x165
    x167 = x119**2
    x168 = x138*x143*x155*x167
    x169 = x119 + x168
    x170 = x166*x169
    x171 = x161 - x170
    x172 = x171*x63
    x173 = x172 + x37
    x174 = x173*x35
    x175 = EI*beta2*d4_2*x121*x48*x59*x60
    x176 = beta2*d2_2*x130*x48
    x177 = EI*d3_2*x43*x59*x60
    x178 = -1.0*x156
    x179 = x175 + x176 + x177 + x178
    x180 = x155*x179
    x181 = x119*x143*x155*x166
    x182 = x180 + x181
    x183 = -b_L*x182
    x184 = x171 + x174 + x183
    x185 = x184*x3
    x186 = x173 + x185
    x187 = b_m*b_r*x173*x19
    x188 = x181 + x187
    x189 = x155*x160
    x190 = x188 - x189
    th_out = 162.974661726101*x172 + 162.974661726101*x37
    a_out = a_gain*x19*(a_L*(d1_1*x186 + L1*d4_1*x0*x184*x5 + b_L*beta1*d2_1*x173*x23 - d3_1*x0*x190*x7*x8) + b_L*d1_1*x173 + L1*d4_1*x186*x5 + d3_1*x0*x184*x7*x8 - d2_1*x0*x13*x14*x190)
    return th_out, a_out
