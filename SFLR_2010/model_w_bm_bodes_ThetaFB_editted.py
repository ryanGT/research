from __future__ import division
from scipy import sinh, cosh, sin, cos, real, imag, shape, arange, pi, zeros, array, eye, transpose, conj, c_, poly, vectorize, dot, randn, sum, squeeze, sqrt
#from scipy import matrixmultiply
#from numpy.lib.scimath import sqrt
#from LinearAlgebra import inverse
import pylab
import rwkbode
reload(rwkbode)
from scipy.optimize import newton, fmin, fminbound
#pylab.ioff()

import sys, os, copy, time

zsin=sin
zcos=cos
zsinh=sinh
zcosh=cosh

def Bodes(s, params, Gth):
    if type(params) == dict:
        params = SLFR_TMM.SLFR_params(**params)
    EI = params.EI
    L1 = params.L
    L2 = params.L2
    mu = params.mu
    c_beam = params.c_beam
    if c_beam > 0.0:
        EI = EI*(1.0+c_beam*s)
##     beta = pow((-1*s*s*L**4*mu/EI),0.25)
##     d1 = 0.5*(cos(beta)+cosh(beta))
##     d2 = 0.5*(sinh(beta)-sin(beta))
##     d3 = 0.5*(cosh(beta)-cos(beta))
##     d4 = 0.5*(sin(beta)+sinh(beta))
    beta1 = pow((-1*s*s*L1**4*mu/EI),0.25)
    d1_1 = 0.5*(cos(beta1)+cosh(beta1))
    d2_1 = 0.5*(sinh(beta1)-sin(beta1))
    d3_1 = 0.5*(cosh(beta1)-cos(beta1))
    d4_1 = 0.5*(sin(beta1)+sinh(beta1))
    beta2 = pow((-1*s*s*L2**4*mu/EI),0.25)
    d1_2 = 0.5*(cos(beta2)+cosh(beta2))
    d2_2 = 0.5*(sinh(beta2)-sin(beta2))
    d3_2 = 0.5*(cosh(beta2)-cos(beta2))
    d4_2 = 0.5*(sin(beta2)+sinh(beta2))
    a_m = params.a_m
    a_L = params.a_L
    a_I = params.a_I
    a_r = params.a_r
    b_m = params.b_m
    b_L = params.b_L
    b_I = params.b_I
    b_r = params.b_r
    k_spring = params.k_spring
    c_spring = params.c_spring
    k_clamp = params.k_clamp
    c_clamp = params.c_clamp
    K_act = params.K_act
    tau = params.tau
    a_gain = params.a_gain
    p_act1 = params.p_act1
    p_act2 = params.p_act2
    z_act = params.z_act
    H = params.H
    I = 1.0j
    #--------------------------------
    x0 = 1/EI
    x1 = c_clamp*s
    x2 = k_clamp + x1
    x3 = 1/x2
    x4 = b_L*d1_1*x3
    x5 = 1/beta1
    x6 = L1*b_L*d4_1*x0*x5
    x7 = L1**2
    x8 = x5**2
    x9 = d3_1*x0*x7*x8
    x10 = x4 + x6 + x9
    x11 = -x10
    x12 = b_L*x9
    x13 = x7**(3/2)
    x14 = x8**(3/2)
    x15 = L1*d2_1*x0*x5*x7*x8
    x16 = L1*b_L*d4_1*x3*x5
    x17 = x12 + x15 + x16
    x18 = -x17
    x19 = s**2
    x20 = x13**(-1/3)
    x21 = x20**2
    x22 = x14**(-2/3)
    x23 = EI*b_L*d3_1*x21*x22*x3
    x24 = b_L*beta1*d2_1*x20
    x25 = a_L - a_r
    x26 = x19**(-1/2)
    x27 = p_act1 + s
    x28 = 1/x27
    x29 = 2.0*pi*I
    x30 = p_act1 + x29
    x31 = abs(x30)
    x32 = Gth(s)*H*K_act*x26*x28*x31
    x33 = 1.0 + x32
    x34 = 1/x33
    x35 = b_I*x19
    x36 = b_L - b_r
    x37 = b_m*b_r*x19*x36
    x38 = x35 - x37
    x39 = Gth(s)*K_act*x26*x28*x31*x34
    x40 = x3*x38*x39
    x41 = x39 + x40
    x42 = L2**(-2)
    x43 = beta2**2
    x44 = d1_1*x41
    x45 = x24*x39
    x46 = L1*d4_1*x0*x38*x39*x5
    x47 = -Gth(s)*K_act*b_m*b_r*s*x28*x31*x34*x9
    x48 = x44 + x45 + x46 + x47
    x49 = L1*d4_1*x41*x5
    x50 = b_L*d1_1*x39
    x51 = -Gth(s)*K_act*b_m*b_r*s*x15*x28*x31*x34
    x52 = d3_1*x0*x38*x39*x7*x8
    x53 = x42**(1/2)
    x54 = x21**(3/2)
    x55 = x22**(3/2)
    x56 = -EI*b_L*d4_1*x20*x21*x39*x55
    x57 = Gth(s)*K_act*b_m*b_r*d1_1*s*x28*x31*x34
    x58 = -beta1*d2_1*x20*x38*x39
    x59 = -EI*d3_1*x21*x22*x41
    x60 = x49 + x50 + x51 + x52
    x61 = a_I*x19
    x62 = a_m*a_r*x19*x25
    x63 = x61 - x62
    x64 = c_spring*s
    x65 = k_spring + x64
    x66 = 1/x65
    x67 = x34*x38*x66
    x68 = 1.0 + x67
    x69 = x3*x68
    x70 = x34*x66
    x71 = x69 + x70
    x72 = L1*d4_1*x0*x5*x68
    x73 = -b_m*b_r*x19*x70*x9
    x74 = x24*x70
    x75 = d1_1*x71
    x76 = x72 + x73 + x74 + x75
    x77 = d3_1*x0*x68*x7*x8
    x78 = L1*d4_1*x5*x71
    x79 = b_L*d1_1*x70
    x80 = -b_m*b_r*x15*x19*x70
    x81 = x43**(-1/2)
    x82 = b_m*b_r*d1_1*x19*x70
    x83 = x77 + x78 + x79 + x80
    x84 = x53**3
    x85 = x81**(-3)
    x86 = a_L*x11
    x87 = x18 + x86
    x88 = a_m*x18*x19
    x89 = a_m*a_r*x11*x19
    x90 = d1_1 + x23 + x24 + x88 + x89
    x91 = -1.0*b_L*d1_1
    x92 = x11*x63
    x93 = -EI*x24*x3
    x94 = d1_1 + x23 + x24
    x95 = -a_L*x94
    x96 = -1.0*L1*d4_1*x5
    x97 = -x25*x88
    x98 = x91 + x92 + x93 + x95 + x96 + x97
    x99 = EI*b_L*d3_1*x21*x22*x70
    x100 = EI*beta1*d2_1*x20*x71
    x101 = b_m*b_r*x19*x70*x96
    x102 = d1_1*x68
    x103 = x63*x76
    x104 = -EI*b_L*d4_1*x20*x21*x55*x70
    x105 = -EI*d3_1*x21*x22*x71
    x106 = -beta1*d2_1*x20*x68
    x107 = x104 + x105 + x106 + x82
    x108 = -a_L*x107
    x109 = -a_m*x19*x25*x83
    x110 = x100 + x101 + x102 + x103 + x108 + x109 + x99
    x111 = a_m*x19*x83
    x112 = a_m*a_r*x19*x76
    x113 = x111 + x112 + x82
    x114 = EI*b_L*d4_1*x20*x21*x55*x70
    x115 = EI*d3_1*x21*x22*x71
    x116 = beta1*d2_1*x20*x68
    x117 = x114 + x115 + x116
    x118 = x113 - x117
    x119 = a_L*x76
    x120 = x119 + x83
    x121 = d1_2*x110
    x122 = EI*beta2*d2_2*x53*x76
    x123 = EI*d3_2*x120*x42*x43
    x124 = x121 + x122 + x123
    x125 = L2*d4_2*x118*x81
    x126 = x124 - x125
    x127 = 1/x126
    x128 = a_m*x19*x60
    x129 = a_m*a_r*x19*x48
    x130 = x128 + x129 + x56 + x57 + x58 + x59
    x131 = x56 + x57 + x58 + x59
    x132 = -a_L*x131
    x133 = EI*b_L*d3_1*x21*x22*x39
    x134 = -x128*x25
    x135 = x48*x63
    x136 = Gth(s)*K_act*b_m*b_r*s*x28*x31*x34*x96
    x137 = EI*beta1*d2_1*x20*x41
    x138 = d1_1*x38*x39
    x139 = x132 + x133 + x134 + x135 + x136 + x137 + x138
    x140 = a_L*x48
    x141 = x140 + x60
    x142 = EI*beta2*d2_2*x11*x53
    x143 = EI*d3_2*x42*x43*x87
    x144 = -L2*d4_2*x81*x90
    x145 = d1_2*x98
    x146 = x142 + x143 + x144 + x145
    x147 = -beta2*d2_2*x110*x53
    x148 = -EI*d3_2*x42*x43*x76
    x149 = d1_2*x118
    x150 = -EI*beta2*d4_2*x120*x43*x84
    x151 = x147 + x148 + x149 + x150
    x152 = -EI*d3_2*x11*x42*x43
    x153 = -EI*beta2*d4_2*x43*x84*x87
    x154 = d1_2*x90
    x155 = L2*d4_2*x81*x90
    x156 = -x142
    x157 = -x143
    x158 = -x145
    x159 = x155 + x156 + x157 + x158
    x160 = x127*x151*x159
    x161 = -beta2*d2_2*x53*x98
    x162 = x152 + x153 + x154 + x160 + x161
    x163 = 1/x162
    x164 = -x62
    x165 = x164 + x61
    x166 = x165*x76
    x167 = x109
    x168 = x100 + x101 + x102 + x108 + x166 + x167 + x99
    x169 = -L2*d4_2*x130*x81
    x170 = EI*beta2*d2_2*x48*x53
    x171 = EI*d3_2*x141*x42*x43
    x172 = -x125
    x173 = d1_2*x168
    x174 = x122 + x123 + x172 + x173
    x175 = 1/x174
    x176 = -beta2*d2_2*x168*x53
    x177 = x148 + x149 + x150 + x176
    x178 = x11*x165
    x179 = L1*d4_1*x5
    x180 = a_L*x94
    x181 = b_L*d1_1
    x182 = x25*x88
    x183 = EI*x24*x3
    x184 = x179 + x180 + x181 + x182 + x183
    x185 = x178 - x184
    x186 = x165*x48
    x187 = x134
    x188 = x132 + x133 + x136 + x137 + x138 + x186 + x187
    x189 = d1_2*x185
    x190 = x142 + x143 + x144 + x189
    x191 = beta2*d2_2*x185*x53
    x192 = EI*beta2*d4_2*x43*x84*x87
    x193 = EI*d3_2*x11*x42*x43
    x194 = x175*x177*x190
    x195 = x191 + x192 + x193 + x194
    x196 = x154 - x195
    x197 = 1/x196
    x198 = d1_2*x130
    x199 = -EI*d3_2*x42*x43*x48
    x200 = -EI*beta2*d4_2*x141*x43*x84
    x201 = -beta2*d2_2*x188*x53
    x202 = x198 + x199 + x200 + x201
    x203 = -1.0*x170
    x204 = L2*d4_2*x130*x81
    x205 = -1.0*x171
    x206 = -1.0*d1_2*x188
    x207 = x203 + x204 + x205 + x206
    x208 = x175**2
    x209 = x177*x190*x197*x208
    x210 = x175 + x209
    x211 = x207*x210
    x212 = x175*x190*x197*x202
    x213 = x211 + x212
    x214 = x213*x34*x66
    x215 = x214 + x39
    x216 = d1_2*x188
    x217 = x169 + x170 + x171 + x216
    x218 = x175*x177*x197*x217
    x219 = x215*x38
    x220 = -1.0*x198
    x221 = EI*beta2*d4_2*x141*x43*x84
    x222 = EI*d3_2*x42*x43*x48
    x223 = beta2*d2_2*x188*x53
    x224 = x220 + x221 + x222 + x223
    x225 = x197*x224
    x226 = x218 + x225
    x227 = -b_L*x226
    x228 = x213 + x219 + x227
    x229 = x228*x3
    x230 = x215 + x229
    x231 = b_m*b_r*x19*x215
    x232 = x218 + x231
    x233 = x197*x202
    x234 = x232 - x233
    th_out = 162.974661726101*x39 + 162.974661726101*x34*x66*(-(x127 + x146*x151*x163*x127**2)*(x169 + x170 + x171 + d1_2*x139) + x127*x146*x163*(x198 + x199 + x200 - beta2*d2_2*x139*x53))
    a_out = a_gain*x19*(a_L*(d1_1*x230 + L1*d4_1*x0*x228*x5 + b_L*beta1*d2_1*x20*x215 - d3_1*x0*x234*x7*x8) + b_L*d1_1*x215 + L1*d4_1*x230*x5 + d3_1*x0*x228*x7*x8 - d2_1*x0*x13*x14*x234)
    return th_out, a_out
