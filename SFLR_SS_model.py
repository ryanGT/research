from pylab import *
from scipy import *

import controls


import rwkmisc


class SS_model(object):
    def calc_num(self):
        p_act = self.p_act1
        K_act = self.K_act
        H = self.H
        s1 = 1.0*2.0j*pi#magnitude of s at 1 Hz - fix this point for
        m1 = abs(s1*(s1+p_act))
        self.num = K_act*m1#*m2

        
    def calc_coeffs(self):
        #This code is auto-generated by
        #/home/ryan/siue/Research/PSoC_Research/SFLR_2010/modeling/numeric_TMM_model/ss_from_ad_hoc_TF.py
        #--------------------------------
        #--------------------------------
        self.a_hat1 = self.p_act1*self.p_act2*self.wp1**2*self.wp2**2*self.wz1**2*self.wz2**2
        self.a_hat2 = self.p_act1*self.wp1**2*self.wp2**2*self.wz1**2*self.wz2**2 + self.p_act2*self.wp1**2*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.p_act2*self.wp1*self.zp1*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.p_act2*self.wp2*self.zp2*self.wp1**2*self.wz1**2*self.wz2**2
        self.a_hat3 = self.wp1**2*self.wp2**2*self.wz1**2*self.wz2**2 + self.p_act1*self.p_act2*self.wp1**2*self.wz1**2*self.wz2**2 + self.p_act1*self.p_act2*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.wp1*self.zp1*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.wp2*self.zp2*self.wp1**2*self.wz1**2*self.wz2**2 + 2*self.p_act2*self.wp1*self.zp1*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.p_act2*self.wp2*self.zp2*self.wp1**2*self.wz1**2*self.wz2**2 + 4*self.p_act1*self.p_act2*self.wp1*self.wp2*self.zp1*self.zp2*self.wz1**2*self.wz2**2
        self.a_hat4 = self.p_act1*self.wp1**2*self.wz1**2*self.wz2**2 + self.p_act1*self.wp2**2*self.wz1**2*self.wz2**2 + self.p_act2*self.wp1**2*self.wz1**2*self.wz2**2 + self.p_act2*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.wp1*self.zp1*self.wp2**2*self.wz1**2*self.wz2**2 + 2*self.wp2*self.zp2*self.wp1**2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.p_act2*self.wp1*self.zp1*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.p_act2*self.wp2*self.zp2*self.wz1**2*self.wz2**2 + 4*self.p_act1*self.wp1*self.wp2*self.zp1*self.zp2*self.wz1**2*self.wz2**2 + 4*self.p_act2*self.wp1*self.wp2*self.zp1*self.zp2*self.wz1**2*self.wz2**2
        self.a_hat5 = self.wp1**2*self.wz1**2*self.wz2**2 + self.wp2**2*self.wz1**2*self.wz2**2 + self.p_act1*self.p_act2*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.wp1*self.zp1*self.wz1**2*self.wz2**2 + 2*self.p_act1*self.wp2*self.zp2*self.wz1**2*self.wz2**2 + 2*self.p_act2*self.wp1*self.zp1*self.wz1**2*self.wz2**2 + 2*self.p_act2*self.wp2*self.zp2*self.wz1**2*self.wz2**2 + 4*self.wp1*self.wp2*self.zp1*self.zp2*self.wz1**2*self.wz2**2
        self.a_hat6 = self.p_act1*self.wz1**2*self.wz2**2 + self.p_act2*self.wz1**2*self.wz2**2 + 2*self.wp1*self.zp1*self.wz1**2*self.wz2**2 + 2*self.wp2*self.zp2*self.wz1**2*self.wz2**2
        self.a_hat7 = self.wz1**2*self.wz2**2
        self.b_th_hat0 = self.H*self.num*self.wp1**2*self.wp2**2*self.wz1**2*self.wz2**2
        self.b_th_hat1 = 2*self.H*self.num*self.wz1*self.zz1*self.wp1**2*self.wp2**2*self.wz2**2 + 2*self.H*self.num*self.wz2*self.zz2*self.wp1**2*self.wp2**2*self.wz1**2
        self.b_th_hat2 = self.H*self.num*self.wp1**2*self.wp2**2*self.wz1**2 + self.H*self.num*self.wp1**2*self.wp2**2*self.wz2**2 + 4*self.H*self.num*self.wz1*self.wz2*self.zz1*self.zz2*self.wp1**2*self.wp2**2
        self.b_th_hat3 = 2*self.H*self.num*self.wz1*self.zz1*self.wp1**2*self.wp2**2 + 2*self.H*self.num*self.wz2*self.zz2*self.wp1**2*self.wp2**2
        self.b_th_hat4 = self.H*self.num*self.wp1**2*self.wp2**2
        self.b_a_hat2 = self.B1*self.H*self.a_gain*self.num*self.wp1**2*self.wp2**2*self.wz2**2 + self.B2*self.H*self.a_gain*self.num*self.wp1**2*self.wp2**2*self.wz1**2
        self.b_a_hat3 = 2*self.B1*self.H*self.a_gain*self.num*self.wz2*self.zz2*self.wp1**2*self.wp2**2 + 2*self.B2*self.H*self.a_gain*self.num*self.wz1*self.zz1*self.wp1**2*self.wp2**2
        self.b_a_hat4 = self.B1*self.H*self.a_gain*self.num*self.wp1**2*self.wp2**2 + self.B2*self.H*self.a_gain*self.num*self.wp1**2*self.wp2**2

        self.a1 = self.a_hat1/self.a_hat7
        self.a2 = self.a_hat2/self.a_hat7
        self.a3 = self.a_hat3/self.a_hat7
        self.a4 = self.a_hat4/self.a_hat7
        self.a5 = self.a_hat5/self.a_hat7
        self.a6 = self.a_hat6/self.a_hat7
        self.b_th0 = self.b_th_hat0/self.a_hat7
        self.b_th1 = self.b_th_hat1/self.a_hat7
        self.b_th2 = self.b_th_hat2/self.a_hat7
        self.b_th3 = self.b_th_hat3/self.a_hat7
        self.b_th4 = self.b_th_hat4/self.a_hat7
        self.b_a2 = self.b_a_hat2/self.a_hat7
        self.b_a3 = self.b_a_hat3/self.a_hat7
        self.b_a4 = self.b_a_hat4/self.a_hat7
        #--------------------------------


    def set_zero_coeffs(self, prop_str):
        for i in range(self.N):
            cur_prop = prop_str + str(i)
            if not hasattr(self, cur_prop):
                setattr(self, cur_prop, 0.0)


    def build_matrices(self):
        self.A = zeros((self.N, self.N), dtype='float64')
        self.B = zeros((self.N,), dtype='float64')
        self.C = zeros((2, self.N), dtype='float64')

        self.B[-1] = 1.0

        for i in range(1, self.N):
            self.A[i-1,i] = 1.0

        for i in range(self.N):
            a_i_str = 'a' + str(i)
            a_i = getattr(self, a_i_str)
            self.A[-1,i] = -a_i

            b_th_i_str = 'b_th' + str(i)
            b_th_i = getattr(self, b_th_i_str)
            self.C[0,i] = b_th_i

            b_a_i_str = 'b_a' + str(i)
            b_a_i = getattr(self, b_a_i_str)
            self.C[1,i] = b_a_i

            

    def __init__(self, pklname, N=7):
        mydict = rwkmisc.LoadPickle(pklname)
        for key, value in mydict.iteritems():
            setattr(self, key, value)
        self.calc_num()
        self.calc_coeffs()
        self.N = N
        self.set_zero_coeffs('a')
        self.set_zero_coeffs('b_th')
        self.set_zero_coeffs('b_a')
        self.build_matrices()
        self.I = eye(N)


    def calc_freq_resp_one_s(self, s_i):
        mat = s_i*self.I - self.A
        mati = 
        
    def calc_freq_resp(self, f):
        
#    def FreqResp(self, 
